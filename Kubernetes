Role of containers in application development and deployment ---
  Containers are quick to create and destroy and computing is trending towards even faster start/stop
times.


Kubernetes provides a new set of abstraction that go well beyond the bases of container 
deployments and enable you to focus on the big picture.

Pod: Represents logical application. - Contains 1/+ containers and volumes
      And if 1/+ more containers have dependecnies on each other then they can be packaged in a single pod.
      Containers in pod have shared namespaces and one IP per pod
      They can be created by using pod configuration files.

Monitoring and Health Checks:
1. Sometimes pods might be running but the application in the pod is malfunctioning like deadlocked.
2. There are readiness probes to indicate when the pod is ready to serve traffic.
3. If aliveness probes fails mutiple times then the container will be restarted again

Secrets and ConfigMaps
1. Some applications need some certs like TLS certs to set secret configuration.
2. Don't store secrets in Pods or Docker containers instead ConfigMaps take care.

cert.pem and key.pem -> secure traffic on monolith server
ca.pem -> HTTP client as a CA to trust.

To check the logs we use - kubectl logs -c nginx secure-monolith
But in prod we expose this as a service

Services:
- Pods can be restarted but what if its IP address fails then in that case we use Services
- Persistent endpoints for pods
- Use Labels to Select Pods
- Internal or External IPs
- 3 types of services:
  a. Cluster IP - internal IP
  b. Tight node - external IP that's externally accessible
  c. Load Balancing - Adds load balancer from the cloud provider which forced traffic from service to node within in.
